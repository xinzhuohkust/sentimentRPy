function(x) {
result <- x |>
dplyr::tibble(text = _, id = 1) |>
tidytext::unnest_tokens(word, text) |>
dplyr::filter(!word %in% stopwords::stopwords(source = "stopwords-iso")) |>
dplyr::left_join(tidytext::get_sentiments("afinn"), by = "word") |>
tidyr::replace_na(list(value = 0)) |>
tidyr::nest(data = !id) |>
dplyr::mutate(sentiment = purrr::map(data, cal_sentiment)) |>
dplyr::pull(sentiment)
if(length(result) == 0) {
result <- tibble::tribble(
~neu, ~pos, ~neg,
0, 0, 0
)
} else {
result <- result |>
unlist() |>
tibble::as_tibble_row()
}
return(result)
},
otherwise = tibble::tribble(
~neu, ~pos, ~neg,
"error!", "error!", "error!"
)
)
get_sentiment_word("I hate you")
cal_sentiment <- function(x) {
x |>
dplyr::filter(value == 0) |>
dplyr::pull(value) |>
length() -> neu
x |>
dplyr::filter(value > 0) |>
dplyr::pull(value) |>
sum() -> pos
x |>
dplyr::filter(value < 0) |>
dplyr::pull(value) |>
sum() -> neg
result <- c(neu, pos, neg)
names(result) <- c("neu", "pos", "neg")
return(result)
}
get_sentiment_word <- purrr::possibly(
function(x) {
result <- x |>
dplyr::tibble(text = _, id = 1) |>
tidytext::unnest_tokens(word, text) |>
dplyr::filter(!word %in% stopwords::stopwords(source = "stopwords-iso")) |>
dplyr::left_join(tidytext::get_sentiments("afinn"), by = "word") |>
tidyr::replace_na(list(value = 0)) |>
tidyr::nest(data = !id) |>
dplyr::mutate(sentiment = purrr::map(data, cal_sentiment)) |>
dplyr::pull(sentiment)
if(length(result) == 0) {
result <- tibble::tribble(
~neu, ~pos, ~neg,
0, 0, 0
)
} else {
result <- result |>
unlist() |>
tibble::as_tibble_row()
}
return(result)
},
otherwise = tibble::tribble(
~neu, ~pos, ~neg,
"error!", "error!", "error!"
)
)
get_sentiment_sentence <- purrr::possibly(
function(x) {
container <- x |>
sentimentr::get_sentences() |>
sentimentr::sentiment_by()
result <- tibble::tibble(
sentiment = purrr::pluck(container, "ave_sentiment"),
sd = purrr::pluck(container, "sd")
)
return(result)
},
otherwise = tibble::tribble(
~sentiment, ~sd,
"error!", "error!"
)
)
get_sentiment_sentence <- purrr::possibly(
function(x) {
container <- x |>
sentimentr::get_sentences() |>
sentimentr::sentiment_by()
result <- tibble::tibble(
sentiment = purrr::pluck(container, "ave_sentiment"),
sd = purrr::pluck(container, "sd")
)
return(result)
},
otherwise = tibble::tribble(
~sentiment, ~sd,
"error!", "error!"
)
)
sentiment_R <- function(text, method = "sentence", optional_arg = NULL) {
if(method == "sentence") {
result <- get_sentiment_sentence(text)
}
if(method == "word") {
result <- get_sentiment_word(text)
}
return(result)
}
sentiment_R("I like you")
sentiment_R <- function(text, method = "sentence", multisession = TRUE, optional_arg = NULL) {
if(method == "sentence") {
result <- get_sentiment_sentence(text)
}
if(method == "word") {
result <- get_sentiment_word(text)
}
return(result)
}
sentiment_R("I like you")
get_sentiment_sentence <- Vectorize(
purrr::possibly(
function(x) {
container <- x |>
sentimentr::get_sentences() |>
sentimentr::sentiment_by()
result <- tibble::tibble(
sentiment = purrr::pluck(container, "ave_sentiment"),
sd = purrr::pluck(container, "sd")
)
return(result)
},
otherwise = tibble::tribble(
~sentiment, ~sd,
"error!", "error!"
)
)
)
get_sentiment_sentence("I like you")
get_sentiment_sentence("I like you", "I hate you")
get_sentiment_sentence(c("I like you", "I hate you"))
get_sentiment_sentence(c("I like you", "I hate you", "I fuck you"))
get_sentiment_sentence <- Vectorize(
purrr::possibly(
function(x) {
container <- x |>
sentimentr::get_sentences() |>
sentimentr::sentiment_by()
result <- tibble::tibble(
sentiment = purrr::pluck(container, "ave_sentiment"),
sd = purrr::pluck(container, "sd")
)
return(result)
},
otherwise = tibble::tribble(
~sentiment, ~sd,
"error!", "error!"
)
)
)
get_sentiment_sentence <- Vectorize(
purrr::possibly(
function(x) {
container <- x |>
sentimentr::get_sentences() |>
sentimentr::sentiment_by()
result <- tibble::tibble(
sentiment = purrr::pluck(container, "ave_sentiment"),
sd = purrr::pluck(container, "sd")
)
return(result)
},
otherwise = tibble::tribble(
~sentiment, ~sd,
"error!", "error!"
)
)
)
get_sentiment_sentence(c("I like you", "I hate you", "I fuck you"))
get_sentiment_word <- Vectorize(
purrr::possibly(
function(x) {
result <- x |>
dplyr::tibble(text = _, id = 1) |>
tidytext::unnest_tokens(word, text) |>
dplyr::filter(!word %in% stopwords::stopwords(source = "stopwords-iso")) |>
dplyr::left_join(tidytext::get_sentiments("afinn"), by = "word") |>
tidyr::replace_na(list(value = 0)) |>
tidyr::nest(data = !id) |>
dplyr::mutate(sentiment = purrr::map(data, cal_sentiment)) |>
dplyr::pull(sentiment)
if(length(result) == 0) {
result <- tibble::tribble(
~neu, ~pos, ~neg,
0, 0, 0
)
} else {
result <- result |>
unlist() |>
tibble::as_tibble_row()
}
return(result)
},
otherwise = tibble::tribble(
~neu, ~pos, ~neg,
"error!", "error!", "error!"
)
)
)
get_sentiment_sentence(c("I like you", "I fuck you"))
future::plan(sequential)
future::plan(sequtial)
future::plan(sequential)
plan(sequential)
furrr::plan(sequential)
future::plan(sequential)
future::plan(sequential)
future::plan(future::sequential)
sentiment_R <- function(text, method = "sentence", multisession = FALSE, optional_arg = NULL) {
if(multisession == TRUE) {
future::plan(multisession)
}
if(method == "sentence") {
result <- get_sentiment_sentence(text)
if(multisession == TRUE) {
result <- text |>
tibble::tibble(text = _) |>
dplyr::add_rownames(var = "id") |>
dplyr::mutate(sentiment = furrr::future_map(text, get_sentiment_sentence, .progress = TRUE))
future::plan(future::sequential)
}
}
if(method == "word") {
result <- get_sentiment_word(text)
if(multisession == TRUE) {
result <- text |>
tibble::tibble(text = _) |>
dplyr::add_rownames(var = "id") |>
dplyr::mutate(sentiment = furrr::future_map(text, get_sentiment_word, .progress = TRUE))
future::plan(future::sequential)
}
}
return(result)
}
sentiment_R("I like you")
sentiment_R(c("I like you"))
sentiment_R(c("I like you", "I hate you"))
sentiment_R(c("I like you", "I hate you", "I fuck you"))
sentiment_R(c("I like you", "I hate you", "I fuck you"), multisession = TRUE)
future::plan(multisession)
sentiment_R <- function(text, method = "sentence", multisession = FALSE, optional_arg = NULL) {
if(multisession == TRUE) {
future::plan(future::multisession)
}
if(method == "sentence") {
result <- get_sentiment_sentence(text)
if(multisession == TRUE) {
result <- text |>
tibble::tibble(text = _) |>
dplyr::add_rownames(var = "id") |>
dplyr::mutate(sentiment = furrr::future_map(text, get_sentiment_sentence, .progress = TRUE))
future::plan(future::sequential)
}
}
if(method == "word") {
result <- get_sentiment_word(text)
if(multisession == TRUE) {
result <- text |>
tibble::tibble(text = _) |>
dplyr::add_rownames(var = "id") |>
dplyr::mutate(sentiment = furrr::future_map(text, get_sentiment_word, .progress = TRUE))
future::plan(future::sequential)
}
}
return(result)
}
sentiment_R(c("I like you", "I hate you", "I fuck you"), multisession = TRUE)
sentiment_R <- function(text, method = "sentence", multisession = FALSE, optional_arg = NULL) {
if(multisession == TRUE) {
future::plan(future::multisession)
}
if(method == "sentence") {
result <- get_sentiment_sentence(text)
if(multisession == TRUE) {
result <- text |>
tibble::tibble(text = _) |>
tibble::rownames_to_column(var = "id") |>
dplyr::mutate(sentiment = furrr::future_map(text, get_sentiment_sentence, .progress = TRUE))
future::plan(future::sequential)
}
}
if(method == "word") {
result <- get_sentiment_word(text)
if(multisession == TRUE) {
result <- text |>
tibble::tibble(text = _) |>
tibble::rownames_to_column(var = "id") |>
dplyr::mutate(sentiment = furrr::future_map(text, get_sentiment_word, .progress = TRUE))
future::plan(future::sequential)
}
}
return(result)
}
sentiment_R(c("I like you", "I hate you", "I fuck you"), multisession = TRUE)
result <- sentiment_R(c("I like you", "I hate you", "I fuck you"), multisession = TRUE)
result %>%
unnest(sentiment)
result |>
unnest(sentiment)
result |>
tidyr::unnest(sentiment)
RconnectPy::where_py()
RconnectPy::import_py_packages("spacy", "asent")
RconnectPy::import_py_packages(c("spacy", "asent"))
nlp <- packages$spacy$load()
packages <- RconnectPy::import_py_packages(c("spacy", "asent"))
packages$spacy$load("en_core_web_lg")
asent_setup <- function() {
packages <- RconnectPy::import_py_packages(c("spacy", "asent"))
nlp <- packages$spacy$load("en_core_web_lg")
packagesnlp$add_pipe("asent_en_v1") # add asent pipe
}
packagesnlp$add_pipe("asent_en_v1")
asent_setup <- function() {
packages <- RconnectPy::import_py_packages(c("spacy", "asent"))
nlp <- packages$spacy$load("en_core_web_lg")
packages$nlp$add_pipe("asent_en_v1")
}
return(nlp)
asent_setup <- function() {
packages <- RconnectPy::import_py_packages(c("spacy", "asent"))
nlp <- packages$spacy$load("en_core_web_lg")
packages$nlp$add_pipe("asent_en_v1")
return(nlp)
}
get_polarity <- nlp("sentiment")$get_extension("polarity")[[3]]
get_polarity <- nlp("sentiment")$get_extension("polarity")[[3]]
asent_setup <- function(python, model = FALSE) {
reticulate::use_python(python)
if(model == TRUE) {
cmd = sprintf("cmd.exe /c %s -m %s install %s", python, "pip", "https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.5.0/en_core_web_lg-3.5.0-py3-none-any.whl")
system(cmd, intern = TRUE)
}
spacy <- reticulate::import("spacy")
asent <- reticulate::import("asent")
nlp <- spacy$load("en_core_web_lg")
nlp$add_pipe("asent_en_v1")
result <- list(
"polarity" = nlp("sentiment")$get_extension("polarity")[[3]],
"nlp" = nlp
)
return(result)
}
asent_setup(RconnectPy::where_py()[1])
packages <- asent_setup(RconnectPy::where_py()[1])
asent <- asent_setup(RconnectPy::where_py()[1])
asent <- asent_setup(RconnectPy::where_py()[1])
asent_setup <- function(python, model = FALSE) {
reticulate::use_python(python)
if(model == TRUE) {
cmd = sprintf("cmd.exe /c %s -m %s install %s", python, "pip", "https://github.com/explosion/spacy-models/releases/download/en_core_web_lg-3.5.0/en_core_web_lg-3.5.0-py3-none-any.whl")
system(cmd, intern = TRUE)
}
spacy <- reticulate::import("spacy")
asent <- reticulate::import("asent")
nlp <- spacy$load("en_core_web_lg")
nlp$add_pipe("asent_en_v1")
result <- list(
"polarity" = nlp("sentiment")$get_extension("polarity")[[3]],
"nlp" = nlp
)
return(result)
}
asent <- asent_setup(RconnectPy::where_py()[1])
get_sentimentPy <- function(text) {
container <- purrr::map_dfr(
.x = text,
purrr::possibly(
function(text) {
result <- asent$nlp(text) |>
asent$polarity() |>
print() |>
capture.output() |>
stringr::str_extract_all("-?0\\.\\d+") |>
unlist() |>
as.numeric()
result <- as.character(result)
names(result) <- c("neg", "neu", "pos", "compound")
result <- tibble::as_tibble_row(result)
return(result)
},
otherwise = tibble::tribble(
~neg, ~neu, ~pos, ~compound,
"error!", "error!", "error!", "error!"
)
),
.progress = TRUE
)
return(container)
}
get_sentimentPy("I like you")
get_sentimentPy(c("I like you", "I hate you")
get_sentimentPy(c("I like you", "I hate you"))
get_sentimentPy(c("I like you", "I hate you"))
cal_sentiment <- function(x) {
x |>
dplyr::filter(value == 0) |>
dplyr::pull(value) |>
length() -> neu
x |>
dplyr::filter(value > 0) |>
dplyr::pull(value) |>
sum() -> pos
x |>
dplyr::filter(value < 0) |>
dplyr::pull(value) |>
sum() -> neg
result <- c(neu, pos, neg) |>
as.character()
names(result) <- c("neu", "pos", "neg")
return(result)
}
get_sentiment_word <- function(text) {
purrr::map_vec(
text,
purrr::possibly(
function(x) {
result <- x |>
dplyr::tibble(text = _, id = 1) |>
tidytext::unnest_tokens(word, text) |>
dplyr::filter(!word %in% stopwords::stopwords(source = "stopwords-iso")) |>
dplyr::left_join(tidytext::get_sentiments("afinn"), by = "word") |>
tidyr::replace_na(list(value = 0)) |>
tidyr::nest(data = !id) |>
dplyr::mutate(sentiment = purrr::map(data, cal_sentiment)) |>
dplyr::pull(sentiment)
if(length(result) == 0) {
result <- tibble::tribble(
~neu, ~pos, ~neg,
"0", "0", "0"
)
} else {
result <- result |>
unlist() |>
tibble::as_tibble_row()
}
return(result)
},
otherwise = tibble::tribble(
~neu, ~pos, ~neg,
"error!", "error!", "error!"
)
)
)
}
get_sentiment_sentence <- Vectorize(
purrr::possibly(
function(x) {
container <- x |>
sentimentr::get_sentences() |>
sentimentr::sentiment_by()
result <- tibble::tibble(
sentiment = purrr::pluck(container, "ave_sentiment") |>
as.character(),
sd = purrr::pluck(container, "sd") |>
as.character()
)
return(result)
},
otherwise = tibble::tribble(
~sentiment, ~sd,
"error!", "error!"
)
)
)
get_sentimentR <- function(text, method = "sentence", multisession = FALSE, optional_arg = NULL) {
if(multisession == TRUE) {
future::plan(future::multisession)
}
if(method == "sentence") {
result <- get_sentiment_sentence(text)
if(multisession == TRUE) {
result <- text |>
tibble::tibble(text = _) |>
tibble::rownames_to_column(var = "id") |>
dplyr::mutate(sentiment = furrr::future_map(text, get_sentiment_sentence, .progress = TRUE)) |>
tidyr::unnest(sentiment)
future::plan(future::sequential)
}
}
if(method == "word") {
result <- get_sentiment_word(text)
if(multisession == TRUE) {
result <- text |>
tibble::tibble(text = _) |>
tibble::rownames_to_column(var = "id") |>
dplyr::mutate(sentiment = furrr::future_map(text, get_sentiment_word, .progress = TRUE)) |>
tidyr::unnest(sentiment)
future::plan(future::sequential)
}
}
return(result)
}
get_sentimentR(c("I like you", "I hate you"))
get_sentimentR(c("I like you", "I hate you"), method = "word")
get_sentimentR(c("I like you", "I hate you"), method = "word", multisession = TRUE)
get_sentimentR(c("I like you", "I hate you"), method = "sentence", multisession = TRUE)
